#############################################################################
# Makefile for building: hw3
# Generated by qmake (2.01a) (Qt 4.8.1) on: Thu Jan 23 19:20:23 2014
# Project:  hw3.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile hw3.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib/i386-linux-gnu -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = arrow.cpp \
		bomb.cpp \
		boss.cpp \
		bullet.cpp \
		Dodger.cpp \
		explosion.cpp \
		fireball.cpp \
		gun.cpp \
		health.cpp \
		hitbox.cpp \
		login.cpp \
		main.cpp \
		monster.cpp \
		points.cpp \
		powerUp.cpp \
		projectile.cpp \
		shield.cpp \
		shooter.cpp \
		sidebar.cpp \
		user.cpp \
		zigzagmonster.cpp moc_Dodger.cpp \
		moc_login.cpp \
		moc_sidebar.cpp
OBJECTS       = arrow.o \
		bomb.o \
		boss.o \
		bullet.o \
		Dodger.o \
		explosion.o \
		fireball.o \
		gun.o \
		health.o \
		hitbox.o \
		login.o \
		main.o \
		monster.o \
		points.o \
		powerUp.o \
		projectile.o \
		shield.o \
		shooter.o \
		sidebar.o \
		user.o \
		zigzagmonster.o \
		moc_Dodger.o \
		moc_login.o \
		moc_sidebar.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		hw3.pro
QMAKE_TARGET  = hw3
DESTDIR       = 
TARGET        = hw3

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: hw3.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/i386-linux-gnu/libQtGui.prl \
		/usr/lib/i386-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile hw3.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/i386-linux-gnu/libQtGui.prl:
/usr/lib/i386-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile hw3.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/hw31.0.0 || $(MKDIR) .tmp/hw31.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/hw31.0.0/ && $(COPY_FILE) --parents arrow.h bomb.h boss.h bullet.h Dodger.h explosion.h fireball.h gun.h health.h hitbox.h linkedlist.h login.h monster.h node.h points.h powerUp.h projectile.h shield.h shooter.h sidebar.h user.h zigzagmonster.h .tmp/hw31.0.0/ && $(COPY_FILE) --parents arrow.cpp bomb.cpp boss.cpp bullet.cpp Dodger.cpp explosion.cpp fireball.cpp gun.cpp health.cpp hitbox.cpp login.cpp main.cpp monster.cpp points.cpp powerUp.cpp projectile.cpp shield.cpp shooter.cpp sidebar.cpp user.cpp zigzagmonster.cpp .tmp/hw31.0.0/ && (cd `dirname .tmp/hw31.0.0` && $(TAR) hw31.0.0.tar hw31.0.0 && $(COMPRESS) hw31.0.0.tar) && $(MOVE) `dirname .tmp/hw31.0.0`/hw31.0.0.tar.gz . && $(DEL_FILE) -r .tmp/hw31.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_Dodger.cpp moc_login.cpp moc_sidebar.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_Dodger.cpp moc_login.cpp moc_sidebar.cpp
moc_Dodger.cpp: user.h \
		hitbox.h \
		boss.h \
		monster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h \
		zigzagmonster.h \
		powerUp.h \
		bomb.h \
		arrow.h \
		shield.h \
		explosion.h \
		gun.h \
		points.h \
		health.h \
		shooter.h \
		Dodger.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) Dodger.h -o moc_Dodger.cpp

moc_login.cpp: user.h \
		Dodger.h \
		hitbox.h \
		boss.h \
		monster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h \
		zigzagmonster.h \
		powerUp.h \
		bomb.h \
		arrow.h \
		shield.h \
		explosion.h \
		gun.h \
		points.h \
		health.h \
		shooter.h \
		login.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) login.h -o moc_login.cpp

moc_sidebar.cpp: sidebar.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) sidebar.h -o moc_sidebar.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

arrow.o: arrow.cpp arrow.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o arrow.o arrow.cpp

bomb.o: bomb.cpp bomb.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bomb.o bomb.cpp

boss.o: boss.cpp boss.h \
		monster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o boss.o boss.cpp

bullet.o: bullet.cpp bullet.h \
		linkedlist.h \
		node.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bullet.o bullet.cpp

Dodger.o: Dodger.cpp Dodger.h \
		user.h \
		hitbox.h \
		boss.h \
		monster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h \
		zigzagmonster.h \
		powerUp.h \
		bomb.h \
		arrow.h \
		shield.h \
		explosion.h \
		gun.h \
		points.h \
		health.h \
		shooter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Dodger.o Dodger.cpp

explosion.o: explosion.cpp explosion.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o explosion.o explosion.cpp

fireball.o: fireball.cpp fireball.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o fireball.o fireball.cpp

gun.o: gun.cpp gun.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gun.o gun.cpp

health.o: health.cpp health.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o health.o health.cpp

hitbox.o: hitbox.cpp hitbox.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o hitbox.o hitbox.cpp

login.o: login.cpp login.h \
		user.h \
		Dodger.h \
		hitbox.h \
		boss.h \
		monster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h \
		zigzagmonster.h \
		powerUp.h \
		bomb.h \
		arrow.h \
		shield.h \
		explosion.h \
		gun.h \
		points.h \
		health.h \
		shooter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o login.o login.cpp

main.o: main.cpp login.h \
		user.h \
		Dodger.h \
		hitbox.h \
		boss.h \
		monster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h \
		zigzagmonster.h \
		powerUp.h \
		bomb.h \
		arrow.h \
		shield.h \
		explosion.h \
		gun.h \
		points.h \
		health.h \
		shooter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

monster.o: monster.cpp monster.h \
		bullet.h \
		fireball.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o monster.o monster.cpp

points.o: points.cpp points.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o points.o points.cpp

powerUp.o: powerUp.cpp powerUp.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o powerUp.o powerUp.cpp

projectile.o: projectile.cpp projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o projectile.o projectile.cpp

shield.o: shield.cpp shield.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o shield.o shield.cpp

shooter.o: shooter.cpp shooter.h \
		bullet.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o shooter.o shooter.cpp

sidebar.o: sidebar.cpp sidebar.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o sidebar.o sidebar.cpp

user.o: user.cpp user.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o user.o user.cpp

zigzagmonster.o: zigzagmonster.cpp zigzagmonster.h \
		bullet.h \
		fireball.h \
		linkedlist.h \
		node.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o zigzagmonster.o zigzagmonster.cpp

moc_Dodger.o: moc_Dodger.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Dodger.o moc_Dodger.cpp

moc_login.o: moc_login.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_login.o moc_login.cpp

moc_sidebar.o: moc_sidebar.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_sidebar.o moc_sidebar.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

